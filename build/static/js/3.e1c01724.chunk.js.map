{"version":3,"sources":["redux/contacts/contactOperations.js","redux/contacts/contactsSelector.js","components/phoneForm/PhoneForm.js","components/singleContact/SingleContact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","containers/contacts/Contacts.js"],"names":["getContacts","dispatch","a","contactsAction","getContactsRequest","axios","get","result","getContactsSuccess","data","getContactsError","addContact","name","number","addContactRequest","post","addContactSuccess","addContactError","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","itemsSelector","state","contacts","items","filterSelector","filter","getFilteredContact","createSelector","contact","toLowerCase","includes","getContactById","_","contactId","find","PhoneForm","formInitialState","alert","inputHandler","target","value","setState","submitHandler","e","preventDefault","props","toggleAlert","reset","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","contactOperations","connect","contactsSelector","ownProps","TransitionGroup","component","map","key","handleFilter","contactAction","Contacts","animation","onGetContacts","appear","length"],"mappings":"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","file":"static/js/3.e1c01724.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nimport contactsAction from './contactAction';\r\n\r\nconst getContacts = () => async dispatch => {\r\n    dispatch(contactsAction.getContactsRequest());\r\n    try {\r\n        const result = await axios.get('/contacts');\r\n        dispatch(contactsAction.getContactsSuccess(result.data));\r\n    } catch (error) {\r\n        dispatch(contactsAction.getContactsError(error));\r\n    }\r\n};\r\n\r\nconst addContact = (name, number) => async dispatch => {\r\n    dispatch(contactsAction.addContactRequest());\r\n    try {\r\n        const result = await axios.post('/contacts', {\r\n            name,\r\n            number,\r\n        });\r\n        dispatch(contactsAction.addContactSuccess(result.data));\r\n    } catch (error) {\r\n        dispatch(contactsAction.addContactError(error));\r\n    }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n    dispatch(contactsAction.deleteContactRequest());\r\n    try {\r\n        await axios.delete(`/contacts/${id}`);\r\n        dispatch(contactsAction.deleteContactSuccess(id));\r\n    } catch (error) {\r\n        dispatch(contactsAction.deleteContactError(error));\r\n    }\r\n};\r\n\r\nexport default {\r\n    getContacts,\r\n    addContact,\r\n    deleteContact,\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst itemsSelector = state => state.contacts.items;\r\nconst filterSelector = state => state.contacts.filter;\r\n\r\nconst getFilteredContact = createSelector(\r\n    [itemsSelector, filterSelector],\r\n    (items, filter) => {\r\n        return items.filter(contact =>\r\n            contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n        );\r\n    },\r\n);\r\n\r\nconst getContactById = createSelector(\r\n    [itemsSelector, (_, contactId) => contactId],\r\n    (items, contactId) => items.find(contact => contact.id === contactId),\r\n);\r\n\r\nexport default {\r\n    itemsSelector,\r\n    filterSelector,\r\n    getFilteredContact,\r\n    getContactById,\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { contactOperations, contactsSelector } from '../../redux/contacts';\r\n\r\nimport './PhoneForm.css'\r\n\r\nclass PhoneForm extends Component {\r\n    formInitialState = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n\r\n    state = {\r\n        ...this.formInitialState,\r\n        alert: false,\r\n    };\r\n\r\n    inputHandler = ({ target }) => {\r\n        const { value, name } = target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    submitHandler = e => {\r\n        const { name, number, alert } = this.state;\r\n        e.preventDefault();\r\n\r\n        const { contacts } = this.props;\r\n        const isExists = contacts.find(contact => contact.name === name);\r\n\r\n        if (isExists) {\r\n            this.toggleAlert(alert);\r\n            return this.reset();\r\n        }\r\n\r\n        this.props.addContact(name, number);\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ ...this.formInitialState });\r\n    };\r\n\r\n    toggleAlert = status => {\r\n        this.setState({ alert: !status });\r\n    };\r\n\r\n    render() {\r\n        const { name, number, alert } = this.state;\r\n        const alertDelay = () => this.setState({ alert: !alert });\r\n\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={alert}\r\n                    classNames=\"alert\"\r\n                    timeout={1500}\r\n                    unmountOnExit\r\n                    onEntered={alertDelay}\r\n                >\r\n                    <button\r\n                        onClick={this.toggleAlert}\r\n                        className=\"alert\"\r\n                    >{`Contact already exists!`}</button>\r\n                </CSSTransition>\r\n                <form className=\"contacts_form\" onSubmit={this.submitHandler}>\r\n                    <label className=\"input_name\">\r\n                        Name\r\n            <br></br>\r\n                        <input\r\n                            className=\"input_form\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Add name\"\r\n                            value={name}\r\n                            onChange={this.inputHandler}\r\n                        />\r\n                    </label>\r\n                    <br></br>\r\n                    <label className=\"input_name\">\r\n                        Number\r\n            <br></br>\r\n                        <input\r\n                            className=\"input_form\"\r\n                            type=\"text\"\r\n                            name=\"number\"\r\n                            placeholder=\"Add phone number\"\r\n                            value={number}\r\n                            onChange={this.inputHandler}\r\n                        />\r\n                    </label>\r\n                    <br></br>\r\n                    <button type=\"submit\" className=\"submitBtn\">\r\n                        Create contact\r\n          </button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelector.itemsSelector(state),\r\n    filter: contactsSelector.filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addContact: contactOperations.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneForm);\r\n\r\nPhoneForm.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }),\r\n    ).isRequired,\r\n    filter: PropTypes.string.isRequired,\r\n    addContact: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { contactOperations, contactsSelector } from '../../redux/contacts';\r\n\r\nimport './SingleContact.css';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n    return (\r\n        <li className=\"contact\">\r\n            <h4>{name}</h4>\r\n            <p>{number}</p>\r\n            <button className=\"deleteButton\" type=\"button\" onClick={deleteContact}>\r\n                X\r\n            </button>\r\n        </li>\r\n    );\r\n};\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const contact = contactsSelector.getContactById(state, ownProps.id);\r\n    return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    deleteContact: () => dispatch(contactOperations.deleteContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n\r\nSingleContact.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    deleteContact: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { contactsSelector } from '../../redux/contacts';\r\nimport SingleContact from '../singleContact/SingleContact';\r\nimport './ContactList.css';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n    return (\r\n        <TransitionGroup component=\"ul\" className=\"contact_List\">\r\n            {contacts.map(({ id }) => (\r\n                <CSSTransition key={id} classNames=\"list_item\" timeout={250}>\r\n                    <SingleContact id={id} />\r\n                </CSSTransition>\r\n            ))}\r\n        </TransitionGroup>\r\n    );\r\n};\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelector.getFilteredContact(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }),\r\n    ).isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { contactAction, contactsSelector } from '../../redux/contacts';\r\n\r\nimport './Filter.css';\r\n\r\nconst Filter = ({ filter, handleFilter }) => {\r\n    return (\r\n        <div className='filter_box'>\r\n            <label className='input_label'>\r\n                Find contact you need\r\n                 <br></br>\r\n                <input\r\n                    className='filter_form'\r\n                    type='text'\r\n                    name='filter'\r\n                    placeholder='Enter contact name'\r\n                    value={filter}\r\n                    onChange={handleFilter}\r\n                />\r\n            </label>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filter: contactsSelector.filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    handleFilter: contactAction.handleFilter\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }).isRequired,\r\n    ),\r\n    filter: PropTypes.string.isRequired,\r\n    handleFilter: PropTypes.func.isRequired,\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { contactOperations, contactsSelector } from '../../redux/contacts';\r\nimport PhoneForm from '../../components/phoneForm/PhoneForm';\r\nimport ContactList from '../../components/ContactList/ContactList';\r\nimport Filter from '../../components/Filter/Filter'\r\n// import './Contacts.css';\r\n\r\nclass Contacts extends Component {\r\n    state = {\r\n        animation: false,\r\n    };\r\n    componentDidMount() {\r\n        this.props.onGetContacts();\r\n        this.setState(state => ({\r\n            animation: !state.animation,\r\n        }));\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <CSSTransition\r\n                    in={true}\r\n                    appear={true}\r\n                    classNames=\"title-slideIn\"\r\n                    timeout={500}\r\n                    unmountOnExit\r\n                >\r\n                    <h1 className=\"app_title\">Phonebook</h1>\r\n                </CSSTransition>\r\n\r\n                <PhoneForm />\r\n\r\n                {this.props.contacts.length === 0 && (\r\n                    <>\r\n                        <h2 className=\"contact_title\">Contacts</h2>\r\n                        <p>Contacts list is empty. Please, create new cotnact!</p>\r\n                    </>\r\n                )}\r\n\r\n                <CSSTransition\r\n                    in={this.props.contacts.length > 1}\r\n                    classNames=\"filter_animation\"\r\n                    timeout={250}\r\n                    unmountOnExit\r\n                >\r\n                    <Filter />\r\n                </CSSTransition>\r\n\r\n                <ContactList />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelector.itemsSelector(state),\r\n});\r\nconst mapDispatchToProps = {\r\n    onGetContacts: contactOperations.getContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);"],"sourceRoot":""}